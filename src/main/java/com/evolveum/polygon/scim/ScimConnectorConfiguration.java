package com.evolveum.polygon.scim;

import org.identityconnectors.common.StringUtil;
import org.identityconnectors.common.logging.Log;
import org.identityconnectors.framework.spi.AbstractConfiguration;
import org.identityconnectors.framework.spi.ConfigurationProperty;
import org.identityconnectors.framework.spi.StatefulConfiguration;

public class ScimConnectorConfiguration extends AbstractConfiguration implements StatefulConfiguration {

	private String SCIM_ENDPOINT;
	private String SCIM_VERSION;
	private String USERNAME;
	private String PASSWORD;
	private String LOGINURL;
	private String SERVICEGRANT;
	private String CLIENTID;
	private String CLIENTSECRET;

	private static final Log LOGGER = Log.getLog(ScimConnectorConfiguration.class);

	@ConfigurationProperty(order = 1, displayMessageKey = "Username", groupMessageKey = "basic.group", helpMessageKey = "Please provide the administrator user name for the scim enabled service you are logging into", required = true, confidential = false)

	public String getUserName() {
		return USERNAME;
	}

	public void setUserName(String username) {
		this.USERNAME = username;
	}

	@ConfigurationProperty(order = 2, displayMessageKey = "Password", groupMessageKey = "basic.group", helpMessageKey = "Please provide the administrator password used to connect to the scim enabled service", required = true, confidential = true)

	public String getPassword() {
		return PASSWORD;

	}

	public void setPassword(String passwd) {
		this.PASSWORD = passwd;
	}

	@ConfigurationProperty(order = 3, displayMessageKey = "Clientsecret", groupMessageKey = "basic.group", helpMessageKey = "Please provide the client token generated by the service endpoint for application interconnection", required = true, confidential = true)

	public String getClientSecret() {
		return CLIENTSECRET;
	}

	public void setClientSecret(String clientSecret) {
		this.CLIENTSECRET = clientSecret;
	}

	@ConfigurationProperty(order = 4, displayMessageKey = "Client ID", groupMessageKey = "basic.group", helpMessageKey = "Please provide the client ID generated by the service endpoint", required = true, confidential = false)
	public String getClientID() {
		return CLIENTID;
	}

	public void setClientID(String clientID) {
		this.CLIENTID = clientID;
	}

	@ConfigurationProperty(order = 5, displayMessageKey = "Scim endpoint", groupMessageKey = "basic.group", helpMessageKey = "Please provide the scim endpoint of the service provider (eg. /services/scim)", required = true, confidential = false)

	public String getEndpoint() {
		return SCIM_ENDPOINT;
	}

	public void setEndpoint(String endpoint) {
		this.SCIM_ENDPOINT = endpoint;
	}

	@ConfigurationProperty(order = 6, displayMessageKey = "Scim version", groupMessageKey = "basic.group", helpMessageKey = "Please provide the scim version which is supported by the service provider (eq. /v1)", required = true, confidential = false)

	public String getVersion() {
		return SCIM_VERSION;
	}

	public void setVersion(String version) {
		this.SCIM_VERSION = version;
	}

	@ConfigurationProperty(order = 7, displayMessageKey = "Login url", groupMessageKey = "basic.group", helpMessageKey = "Please provide the Url address for log in", required = true, confidential = false)

	public String getLoginURL() {
		return LOGINURL;
	}

	public void setLoginURL(String loginURL) {
		this.LOGINURL = loginURL;
	}

	@ConfigurationProperty(order = 8, displayMessageKey = "Service Grant", groupMessageKey = "basic.group", helpMessageKey = "Please provide the ulr snippet defining the service and grand type to log into the service (eg. /services/oauth2/token?grant_type=password)", required = true, confidential = false)

	public String getService() {
		return SERVICEGRANT;
	}

	public void setService(String service) {
		this.SERVICEGRANT = service;
	}

	@Override
	public void validate() {

		if (StringUtil.isBlank(USERNAME)) {
			throw new IllegalArgumentException("Username cannot be empty");
		}

		if (StringUtil.isBlank(PASSWORD)) {
			throw new IllegalArgumentException("Password cannot be empty");
		}

		if (StringUtil.isBlank(CLIENTSECRET)) {
			throw new IllegalArgumentException("Client Secret cannot be empty.");
		}

		if (StringUtil.isBlank(LOGINURL)) {
			throw new IllegalArgumentException("Login url cannot be empty.");
		}
		if (StringUtil.isBlank(SERVICEGRANT)) {
			throw new IllegalArgumentException("Service grant cannot be empty.");
		}
		if (StringUtil.isBlank(CLIENTID)) {
			throw new IllegalArgumentException("Client id cannot be empty.");
		}
		if (StringUtil.isBlank(SCIM_ENDPOINT)) {
			throw new IllegalArgumentException("Scim endpoint cannot be empty.");
		}
		if (StringUtil.isBlank(SCIM_VERSION)) {
			throw new IllegalArgumentException("Scim version cannot be empty.");
		}
		LOGGER.info("Configuration valid");
	}

	@Override
	public void release() {

	}

}
